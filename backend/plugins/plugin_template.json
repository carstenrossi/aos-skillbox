{
  "id": "your_plugin_id",
  "name": "your_plugin_name",
  "display_name": "Your Plugin Display Name",
  "description": "Beschreibung was dein Plugin macht",
  "version": "1.0.0",
  "author": "Dein Name",
  "plugin_type": "utility",
  "runtime_type": "nodejs",
  "manifest": {
    "name": "your_plugin_name",
    "display_name": "Your Plugin Display Name",
    "version": "1.0.0",
    "description": "Beschreibung was dein Plugin macht",
    "author": "Dein Name",
    "runtime": "nodejs",
    "functions": [
      {
        "name": "your_function_name",
        "description": "Beschreibung was diese Funktion macht. Wann soll sie verwendet werden?",
        "parameters": {
          "text_param": {
            "type": "string",
            "description": "Beschreibung des Text-Parameters",
            "required": true
          },
          "number_param": {
            "type": "number",
            "description": "Beschreibung des Zahlen-Parameters",
            "required": false,
            "default": 10,
            "min": 1,
            "max": 100
          },
          "choice_param": {
            "type": "enum",
            "description": "Auswahl aus vordefinierten Optionen",
            "values": ["option1", "option2", "option3"],
            "default": "option1",
            "required": false
          },
          "boolean_param": {
            "type": "boolean",
            "description": "Ein true/false Parameter",
            "default": false,
            "required": false
          }
        }
      }
    ],
    "code": "async function your_function_name(parameters) {\n  try {\n    console.log('üîß YourPlugin: Starting with parameters:', parameters);\n    \n    // Parameter validation\n    if (!parameters.text_param) {\n      throw new Error('text_param is required');\n    }\n    \n    // Your API call here\n    const response = await fetch('https://api.example.com/endpoint', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${config.api_key}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: parameters.text_param,\n        number: parameters.number_param || 10,\n        choice: parameters.choice_param || 'option1',\n        boolean: parameters.boolean_param || false\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    console.log('‚úÖ YourPlugin: API response received:', result);\n    \n    // Extract the important data from the API response\n    const outputData = {\n      // For text output:\n      text: result.text || result.content || result.output,\n      \n      // For file URLs (audio, image, etc.):\n      file_url: result.url || result.file_url || result.download_url,\n      \n      // Additional metadata:\n      metadata: {\n        processing_time: result.processing_time,\n        model: result.model,\n        // Add other relevant metadata\n      }\n    };\n    \n    return {\n      success: true,\n      data: outputData,\n      message: `Successfully processed: ${parameters.text_param}`\n    };\n    \n  } catch (error) {\n    console.error('‚ùå YourPlugin: Error occurred:', error);\n    \n    return {\n      success: false,\n      error: error.message || 'Unknown error occurred',\n      data: null,\n      message: `Failed to process: ${error.message}`\n    };\n  }\n}"
  },
  "config_schema": {
    "api_key": {
      "type": "string",
      "description": "API Key f√ºr den externen Service",
      "required": true,
      "secret": true
    },
    "base_url": {
      "type": "string", 
      "description": "Basis URL f√ºr API Calls (optional)",
      "required": false,
      "default": "https://api.example.com"
    },
    "timeout": {
      "type": "number",
      "description": "Timeout f√ºr API Calls in Sekunden",
      "default": 30,
      "min": 5,
      "max": 300
    }
  },
  "dependencies": [
  ],
  "is_active": true,
  "is_public": true
} 